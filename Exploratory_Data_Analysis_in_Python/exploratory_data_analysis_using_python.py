# -*- coding: utf-8 -*-
"""Exploratory Data Analysis using Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eMo_7fh6u6sWU7tQ6yx6uwJTOVjwGzxZ
"""

# Exploratory Data Analysis using Python- A case study
# Introduction:-
'''We will use StackOverflow developer survay dataset for our analysis. This is an annual survey conducted by StatckOverflow
and you can find the row data and result hear: https://insights.stackoverflow.com/survey. Download the CSV anmd upload it'''
# Use urlretrieve function from urllib.request to download csv file from a row URL directry.
# Use a helper library e.g. opendatasets ,which contains a collection of curated datasets and provides a function for directly download.

# !pip install opendatasets --upgrade --quiet
# import opendatasets as od
# od.download('stack-overflow-developer-survey-2023')

import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import seaborn as srn
import os
os.listdir('stack-overflow-developer-survey-2020')
'''README_2023.txt- Containing information about dataset.
   survey_result_schema.csv- Containing the list of questions and the sort codes for each question.
   survey_results_public.csv- Containing the full list of response to the questions'''

survey_raw=pd.read_csv('/content/stack-overflow-developer-survey-2020/survey_results_public.csv')
print(survey_raw)

''' The dataset contain over 89184 responses to 78 questions.The responses have been anonymized and there's no personally
identifiable information available to us- although each respondent has been assigned a randomized respondent ID.'''
survey_raw.columns

survey_schema='/content/stack-overflow-developer-survey-2020/survey_results_schema.csv'
schema_raw=pd.read_csv(survey_schema, index_col='Column').QuestionText

schema_raw

type(schema_raw)

schema_raw['YearsCode']

# Data Preparation and Cleaning: While the survey responces contain a wealth of information, we will limit our analysis to following areas.
# Demographics of the survey respondent and the global programming community.
# Distribution of programming skills, experience and preferences.
# Employment- related information, preferences and opinions.
# Let's select a subset of columns with the relevent data for our analysis
select_columns=[# Demographics
                'Country','Age','Gender','EdLevel','UndergradMajor',
                # Programming experience
                'Hobbyist','Age1stCode','YearsCode','YearsCodePro','LanguageWorkedWith','LanguageDesireNextYear','NEWLearn','NEWStuck',
                # Employment
                'Employment','DevType','WorkWeekHrs','JobSat','JobFactors','NEWOvertime','NEWEdImpt']

len(select_columns)

''' Let's extract a copy of the data from these columns into a new data frame survey_data,
Which we can continue to modify further without affecting the original data frame '''
survey_data=survey_raw[select_columns].copy()
schema=schema_raw[select_columns]

# View some basic information about the data frame
survey_data.shape

survey_data.info()

schema.shape

schema.info()

schema['Age1stCode']

survey_data['Age1stCode']

survey_data.Age1stCode.unique()

'''Most columns have the data type object, either because they contain values of different types or contain empty values (NaN). It appears that every column contains some empty values since the Non-Null count for every column is lower than the total number of rows (64461). We'll need to deal with empty values and manually adjust the data type for each column on a case-by-case basis.

Only two of the columns were detected as numeric columns (Age and WorkWeekHrs), even though a few other columns have mostly numeric values. To make our analysis easier, let's convert some other columns into numeric data types while ignoring any non-numeric value. The non-numeric are converted to NaN'''
survey_data['Age1stCode']=pd.to_numeric(survey_data.Age1stCode, errors='coerce')
survey_data['YearsCode']=pd.to_numeric(survey_data.YearsCode, errors='coerce')
survey_data['YearsCodePro']=pd.to_numeric(survey_data.YearsCodePro, errors='coerce')

# Some basics statistics about the numeric columns.
survey_data.describe()

'''There seems to be a problem with the age column, as the minimum value is 1 and the maximum is 279.
This is a common issue with surveys: responses may contain invalid values due to accidental or intentional errors while responding.
A simple fix would be to ignore the rows where the age is higher than 100 years or lower than 10 years as invalid survey responses.
We can do this using the .drop method'''
survey_data.drop(survey_data[survey_data.Age < 10].index, inplace=True)
survey_data.drop(survey_data[survey_data.Age > 100].index, inplace=True)

# Same hold true for WorkWeekHrs. Let's ignore entries where the value for the column is higher then 140 hour,(~20 hours oer day)
survey_data.drop(survey_data[survey_data.WorkWeekHrs > 140].index, inplace=True)

# The gender column also allowed picking multiple options but to simplify our analysis, we'll remove values containing more option.
survey_data['Gender'].value_counts()

survey_data.where(~(survey_data.Gender.str.contains(';', na=False)),np.nan,inplace=True)

# Now cleaned up and prepared the dataset for analysis.
survey_data.sample(10)

# Exploratory Data Analysis: Before we can ask intresting question about the survey responses. it would help to understand
# what the demographics i.e. country,age,gender,education,employment level.
# Country
srn.set_style('darkgrid')
matplotlib.rcParams['font.size']=14
matplotlib.rcParams['figure.figsize']=(10,6)
matplotlib.rcParams['figure.facecolor']='white'

survey_data.Country.unique()

# We can identify the countries with highest number of respondents using the value_counts method.
top_countries=survey_data.Country.value_counts().head(15)
top_countries

# We can visualize this information using a bar chart
plt.figure(figsize=(10,5))
plt.xticks(rotation=75)
srn.barplot(x=top_countries.index,y=top_countries)

"""It appears that a disproportionately high number of respondents are from the US and India, probably because the survey is in English, and these countries have the highest English-speaking populations. We can already see that the survey may not be representative of the global programming community - especially from non-English speaking countries. Programmers from non-English speaking countries are almost certainly underrepresented.

"""

# Age: The distribution of the age of respondents is another important factor to looks at, and we can usea histogram to visualize it.
plt.figure(figsize=(10,5))
plt.title('Distribution of age')
plt.xlabel("Age")
plt.ylabel("Number of respondents")
plt.hist(survey_data.Age,bins=np.arange(10,80,5),color='purple');

"""It appears that a large percentage of respondents are 20-45 years old. It's somewhat representative of the programming community in general. Many young people have taken up computer science as their field of study or profession in the last 20 years.

Gender:

Let's look at the distribution of responses for the Gender. It's a well-known fact that women and non-binary genders are underrepresented in the programming community, so we might expect to see a skewed distribution here.
"""

gender_counts=survey_data.Gender.value_counts()
gender_counts

"""A Pie chart would be a good way to visualize the distribution."""

plt.figure(figsize=(12,6))
plt.title(schema.Gender)
plt.pie(gender_counts,labels=gender_counts.index,autopct='%1.1f%%',startangle=180);

"""Only about 8% of survey respondents who have answered the question identify as women or non-binary. This number is lower than the overall percentage of women & non-binary genders in the programming community - which is estimated to be around 12%.

Education Level:-

Formal education in computer science is often considered an essential requirement for becoming a programmer. However, there are many free resources & tutorials available online to learn programming. Let's compare the education levels of respondents to gain some insight into this. We'll use a horizontal bar plot here.
"""

schema.EdLevel

survey_data.EdLevel.unique()

plt.figure(figsize=(10,5))
srn.countplot(y=survey_data.EdLevel)
plt.xticks(rotation=75)
plt.title(schema.EdLevel)
plt.ylabel(None)

"""It appears that well over half of the respondents hold a bachelor's or master's degree, so most programmers seem to have some college education. However, it's not clear from this graph alone if they hold a degree in computer science.


Exercises:
 The graph currently shows the number of respondents for each option. Can you modify it to show the percentage instead? Further, try comparing the percentages for each degree for men vs. women.


Let's also plot undergraduate majors, but this time we'll convert the numbers into percentages and sort the values to make it easier to visualize the order.
"""

undergrad_pct=survey_data.UndergradMajor.value_counts()*100/survey_data.UndergradMajor.count()
undergrad_pct

plt.figure(figsize=(10,5))
srn.barplot(x=undergrad_pct, y=undergrad_pct.index)
plt.title(schema.UndergradMajor)
plt.xlabel("Percentage")
plt.ylabel(None)

"""It turns out that 40% of programmers holding a college degree have a field of study other than computer science - which is very encouraging. It seems to suggest that while a college education is helpful in general, you do not need to pursue a major in computer science to become a successful programmer.


Exercises: Analyze the NEWEdImpt column for respondents who hold some college degree vs. those who don't. Do you notice any difference in opinion?

Employment:

Freelancing or contract work is a common choice among programmers, so it would be interesting to compare the breakdown between full-time, part-time, and freelance work. Let's visualize the data from the Employment column.
"""

schema.Employment

survey_data.Employment.unique()

(survey_data.Employment.value_counts(normalize=True,ascending=True)*100).plot(kind='barh',color='b')
plt.title(schema.Employment)
plt.xlabel('Percentage')

"""It appears that close to 10% of respondents are employed part time or as freelancers.


Exercise:
Add a new column EmploymentType containing the values Enthusiast (student or not employed but looking for work), Professional (employed full-time, part-time or freelancing), and Other (not employed or retired). For each of the graphs that follow, show a comparison between Enthusiast and Professional.


The DevType field contains information about the roles held by respondents. Since the question allows multiple answers, the column contains lists of values separated by a semi-colon ;, making it a bit harder to analyze directly.
"""

schema.DevType

survey_data.DevType.value_counts()

